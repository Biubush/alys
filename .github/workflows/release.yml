name: Publish the built software

on:
  create:
    tags:
      - 'v*' # 监听以 'v' 开头的标签

jobs:
  linux_amd64:
    name: Build for amd64

    strategy:
      matrix:
        os: [ ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        pip install aligo flask apscheduler flask_sqlalchemy pyinstaller

    - name: Build the Flask Project
      run: |
        mkdir dist
        pyinstaller -D alys.py --add-data "./static:./static" --add-data "./templates:./templates" --distpath dist

    - name: Package the Flask Project
      run: |
        mv dist/alys dist/alys_${{ github.ref }}_linux_amd64
        cd dist
        tar -czf alys_${{ github.ref }}_linux_amd64.tar.gz *
        mv alys_${{ github.ref }}_linux_amd64.tar.gz ~/alys_${{ github.ref }}_linux_amd64.tar.gz

    - name: Upload build result
      uses: actions/upload-artifact@v3
      with:
        name: build-result
        path: ~/alys_${{ github.ref }}_linux_amd64.tar.gz

  linux_arm64:
    name: Build for arm64

    strategy:                     
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: build
      uses: pguyot/arm-runner-action@v2
      id: build_image
      with:
        copy_artifact_path: binary
        base_image: raspios_lite_arm64:latest
        commands: |
          apt update
          apt install python3 pip -y --fix-missing
          pip install aligo flask apscheduler flask_sqlalchemy pyinstaller
          mkdir dist
          mkdir binary
          pyinstaller -D alys.py --add-data "./static:./static" --add-data "./templates:./templates" --distpath dist
          mv dist/alys dist/alys_${{ github.ref }}_linux_arm64
          cd dist
          tar -czf alys_${{ github.ref }}_linux_arm64.tar.gz *
          mv alys_${{ github.ref }}_linux_arm64.tar.gz ../binary/alys_${{ github.ref }}_linux_arm64.tar.gz

    - name: Upload build result
      uses: actions/upload-artifact@v3
      with:
        name: build-result
        path: binary

  windows_x64:
    name: Build for win_X64

    strategy:
      matrix:
        os: [ windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        pip install aligo flask apscheduler flask_sqlalchemy pyinstaller

    - name: Build the Flask Project
      run: |
        mkdir dist
        pyinstaller -D alys.py --add-data "./static;./static" --add-data "./templates;./templates" --distpath dist

    - name: Package the Flask Project
      run: |
        mv dist/alys dist/alys_${{ github.ref }}_windows_x64
        cd dist
        Compress-Archive -Path * -CompressionLevel Optimal -DestinationPath alys_${{ github.ref }}_windows_x64.zip
        mkdir binary
        mv alys_${{ github.ref }}_windows_x64.zip ~/alys_${{ github.ref }}_windows_x64.zip

    - name: Upload build result
      uses: actions/upload-artifact@v3
      with:
        name: build-result
        path: ~/alys_${{ github.ref }}_windows_x64.zip

  release:
    name: Creat release
    needs: [ windows_x64,linux_arm64,linux_amd64 ]
    runs-on: ubuntu-latest

    steps:
      - name: Download back the built software
        uses: actions/download-artifact@v3
        with:
          name: build-result

      - name: Release software
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}